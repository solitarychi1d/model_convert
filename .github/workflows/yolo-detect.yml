name: Convert Yolo Detect Models

# 触发工作流的事件
on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  pt2onnx:
    strategy:
      matrix:
        runs-on: [ubuntu-22.04]
    runs-on: ${{ matrix.runs-on }}
    container:
      image: python:3.11-slim
      options: --privileged

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1000
        fetch-tags: true

    - name: Run build script
      run: |
        apt-get update && apt-get install -y --no-install-recommends \
          wget \
          libgl1-mesa-glx \
          libglib2.0-0 \
          libsm6 \
          libxext6 \
          libxrender-dev \
          libgomp1 \
          git
        
        # 先安装ultralytics以获取所有依赖
        pip install ultralytics
        
        # 安装其他必要的依赖
        pip install onnx onnxruntime onnxsim 
        pip install opencv-python pillow matplotlib pyyaml seaborn pandas thop psutil
        pip install numpy torch torchvision tqdm tensorboard dill timm
        
        # 卸载ultralytics以使用本地版本
        pip uninstall -y ultralytics
        
        # 设置PYTHONPATH以使用本地ultralytics包
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        cd yolo
        mkdir -pv onnx
        cd onnx
        wget https://github.com/solitarychi1d/model_convert/releases/download/PT/best.pt -O yolo.pt
        
        # 打印Python路径和导入信息以便调试
        python -c "import sys; print(f'Python Path: {sys.path}')"
        python -c "import sys; from pathlib import Path; print(f'Current directory: {Path.cwd()}'); print(f'Parent directory in path: {Path.cwd().parent in [Path(p) for p in sys.path]}')"
        
        # 尝试导入ultralytics看是否成功
        python -c "import ultralytics; print(f'Ultralytics version: {ultralytics.__version__}')"
        
        # 运行转换脚本
        python ../export_det_v11.pyc -w yolo.pt --sim

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: onnx_artifacts
        path: yolo/onnx/*.onnx

  onnx2rknn:
    needs: [pt2onnx]
    strategy:
      matrix:
        runs-on: [ubuntu-22.04]
    runs-on: ${{ matrix.runs-on }}
    container:
      image: kaylor/rk3588_onnx2rknn:2.3.0
      options: --privileged

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1000
        fetch-tags: true

    - name: Download artifacts from pt2onnx
      uses: actions/download-artifact@v4
      with:
        name: onnx_artifacts
        path: onnx_artifacts

    - name: Run build script
      run: |
        # 安装可能需要的系统依赖
        if command -v apt-get &> /dev/null; then
          apt-get update && apt-get install -y --no-install-recommends \
            libgl1-mesa-glx \
            libglib2.0-0 \
            libsm6 \
            libxext6 \
            libxrender-dev
        fi
        
        # 安装dill包
        pip install dill timm
        
        SRC_PATH=$(pwd)
        cd yolo
        mkdir -pv rknn
        cp -vr ${SRC_PATH}/onnx_artifacts/*.onnx ./rknn/
        # 确保使用Python 3.11运行pyc文件
        if command -v python3.11 &> /dev/null; then
          python3.11 convert.pyc rknn/yolo.onnx rk3588 i8 rknn/yolo.rknn
        else
          python convert.pyc rknn/yolo.onnx rk3588 i8 rknn/yolo.rknn
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: rknn_artifacts
        path: yolo/rknn/*.rknn

  onnx2om:
    needs: [pt2onnx]
    strategy:
      matrix:
        runs-on: [ubuntu-22.04]
    runs-on: ${{ matrix.runs-on }}
    container:
      image: kaylor/atc
      options: --privileged

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1000
        fetch-tags: true
        
    - name: Download artifacts from pt2onnx
      uses: actions/download-artifact@v4
      with:
        name: onnx_artifacts
        path: onnx_artifacts

    - name: Run build script
      shell: bash
      run: |
        # 安装可能需要的系统依赖
        if command -v apt-get &> /dev/null; then
          apt-get update && apt-get install -y --no-install-recommends \
            libgl1-mesa-glx \
            libglib2.0-0 \
            libsm6 \
            libxext6 \
            libxrender-dev
        fi
        
        # 安装dill包
        if command -v pip &> /dev/null; then
          pip install dill timm
        fi
        
        SRC_PATH=$(pwd)
        mkdir -pv om
        cp -vr ${SRC_PATH}/onnx_artifacts/*.onnx ./om/
        source /usr/local/Ascend/ascend-toolkit/set_env.sh
        export LD_LIBRARY_PATH=/usr/local/Ascend/ascend-toolkit/latest/x86_64-linux/devlib/:$LD_LIBRARY_PATH
        cd om
        atc --model=yolo.onnx --framework=5 --output=yolo --soc_version=Ascend310B4

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: om_artifacts
        path: om/*.om
